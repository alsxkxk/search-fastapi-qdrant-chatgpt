Content
"
프로그램은 하드디스크 등의 저장 매체에 실행 파일의 형태로 저장된 소프트웨어이다"
"
프로세스는 프로그램이 메모리에 적재되어 실행 중인 상태이다"
"
코드 공간, 데이터 공간, 스택 공간, 힙 공간과 같은 자원을 할당 받는다"
"
운영체제는 프로그램을 메모리에 적재하고 프로세스로 다룬다"
"
운영체제는 프로세스에게 실행에 필요한 메모리를 할당하여 코드와 데이터
등 적재한다"
"
각 프로세스는 독립된 메모리 공간을 가지며, 다른 프로세스의 메모리 영역에 접근하는 것은 허용되지 않는다"
"
운영체제는 각 프로세스의 메모리 위치와 크기 정보를 관리한다"
"
운영체제는 프로세스마다 고유한 번호(프로세스 ID) 할당한다"
"
프로세스의 관한 모든 정보는 커널에 의해 관리된다"
"
프로세스는 실행-대기-잠자기-대기-실행-종료 등의 생명 주기를 가진다"
"
프로세스 생성, 실행, 대기, 종료 등의 모든 관리는 커널에 의해 수행된다"
"
운영체제는 커널 영역에 프로세스 테이블을 만들고, 프로세스들 목록을 관리한다"
"
프로세스 생성, 실행, 일시 중단 및 재개, 정보 관리, 프로세스 통신, 프로세스
동기화, 프로세스 중단, 프로세스 컨텍스트 스위칭과 같은 관리를 한다"
"
하나의 프로그램을 여러 번 실행될 때마다 독립된 프로세스가 생성된다"
"
이 프로세스들을 프로그램의 다중 인스턴스라고 부른다"
"
각 프로세스는 고유한 메모리 공간을 가지고 별개의 프로세스로 간주되지만, 프로그램 코드는 공유할 수 있다"
"
CPU가 주소선을 통해 액세스할 수 있는 전체 메모리 공간을 CPU 주소 공간(CPU address space)이라고 한다"
"
CPU가 주소선의 수에 의해 CPU 주소 공간 크기가 결정된다"
"
예를 들어 32비트 CPU는 32개의 주소선, 2^32개의 주소, 2^32 바이트, 4GB의 공간을 가지고 있다는 뜻이다"
"
CPU가 설치된 메모리의 주소 영역을 넘어 액세스하면 시스템 오류가 발생한다"
"
프로세스는 코드(code) 영역, 데이터(data) 영역, 힙(heap) 영역, 스택(stack) 영역으로 구성되어있다"
"
코드 영역은 사용자가 작성한 모든 함수의 코드나 호출한 라이브러리 함수들의 코드와 같은 실행될 프로그램 코드가 적재되는 영역이다"
"
데이터 영역은 프로그램에서 고정적으로 만든 전역 변수 및 정적 데이터를 저장하는 공간으로, 프로세스가 메모리에 적재될 때 할당되고 종료 시 소멸된다"
"
힙 영역은 프로세스 실행 중에 동적으로 메모리를 할당받는 공간으로, malloc() 또는 new 같은 함수로 할당하며, 할당은 상위 주소에서 하위 주소로 진행된다"
"
스택 영역은 함수가 실행될 때 사용될 데이터를 위해 할당된 공간으로, 매개변수, 지역변수, 함수 종료 후 돌아갈 주소 등을 가지고 있다"
"
함수 호출 시 상위 주소로 공간이 할당되고, 함수가 반환(return)되면 해당 공간이 해제된다"
"
프로세스 주소 공간은 프로세스가 실행 중에 접근할 수 있도록 허용된 주소의 최대 범위이다"
"
프로세스 주소 공간은 논리 공간(가상 공간)이며, 0번지에서 시작하여 연속적인 주소를 가지고 있다"
"
프로세스 주소 공간의 크기는 CPU가 액세스할 수 있는 전체 메모리 크기를 나타낸다"
"
프로세스 주소 공간은 프로세스가 액세스할 수 있는 최대 크기를 의미하며, 프로세스의 실제 크기는 적재된 코드, 전역 변수, 힙 영역(동적 메모리), 스택 영역의 합으로 구성된다"
"
프로세스 주소 공간은 사용자 공간과 커널 공간으로 나뉜다"
"
사용자 공간에는 프로세스의 코드, 데이터, 힙, 스택 영역이 포함되며, 이들은 특정 순서로 할당된다"
"
코드와 데이터 영역은 프로세스가 메모리에 적재될 때 크기가 결정된다"
"
힙은 데이터 영역 바로 다음부터 높은 번지 방향으로 확장되며, 스택은 사용자 공간의 바닥에서 시작하여 낮은 번지 방향으로 확장된다"
"
커널 공간은 시스템 호출을 통해 프로세스가 접근하는 영역으로, 커널 코드, 커널 데이터, 커널 스택이 포함된다"
"
프로세스의 코드와 데이터 영역은 실행 중 크기가 변하지 않지만, 힙과 스택은 사용자 공간 내에서 동적 할당을 통해 확장될 수 있다"
"
각 프로세스는 독립된 사용자 공간을 소유하고, 시스템 전체에는 단일 커널 주소 공간이 있으며, 커널 공간은 모든 프로세스가 공유한다"
"
커널 코드는 사용자 프로세스가 소유한 매핑 테이블을 사용하여 물리 메모리에 위치한다"
"
이는 사용자 공간과 커널 공간이 하나의 가상 주소 영역 내에서 관리된다는 것을 의미한다"
"
프로세스의 주소 공간은 개발자나 사용자가 인지하는 가상 공간을 말하며, 이는 프로세스가 연속적인 메모리 영역에 최대 메모리 크기까지 접근할 수 있다고 상상하는 것이다"
" 
실제로는 물리 메모리의 크기가 주소 공간보다 작을 수 있으며, 프로세스의 코드, 데이터, 힙, 스택이 물리 메모리 전체에 분산되어 저장된다"
"
각 프로세스는 별도의 가상 주소 공간을 가지기 때문에 프로세스 간 주소 공간은 충돌하지 않는다"
"
이는 가상 주소가 물리 주소로 매핑되면서, 서로 다른 프로세스의 메모리 영역이 물리 메모리에서 겹치지 않도록 보장하기 때문이다"
"
프로세스 테이블은 시스템의 모든 프로세스들을 관리하기 위한 표이며, 시스템에 한 개만 보유하고 있으며, 구현 방식은 운영체제마다 다르다"
"
프로세스 제어 블록(PCB)은 프로세스에 관한 정보를 저장하는 구조체로, 프로세스당 하나씩 존재한다"
"
프로세스가 생성될 때 만들어지고 종료되면 삭제되며, 커널에 의해 생성, 저장, 읽기, 프로세스 관리 등을 위해 사용된다"
"
커널 영역, 커널 코드(커널 모드)만이 프로세스 테이블과 PCB에 액세스 가능하다"
"
프로세스는 탄생부터 종료까지 여러 상태를 거치며 실행되며, 이 상태 정보는 프로세스 제어 블록(PCB)에 기록되어, 상태가 바뀔 때마다 갱신된다"
"
프로세스의 상태 중 New(생성 상태)는 메모리 할당 및 필요한 자원이 적재된 상태로, PCB에 New 상태로 등록되고, 실행 준비를 마치면 Ready 상태로 바뀐다"
"
Ready(준비 상태)는 프로세스가 스케줄링을 기다리는 단계로 프로세스는 준비 큐에서 대기한다"
"
스케줄링 되면 Running 상태로 바뀌고, CPU에 의해 실행된다"
"
Running(실행 상태)는 프로세스가 CPU에 의해 현재 실행되고 있는 상태로, CPU의 시간할당량(타임슬라이스)이 지나면 다시 Ready 상태로 바뀌고 준비 큐에 삽입된다"
"
프로세스가 입출력을 시행하면 커널은 프로세스를 Blocked 상태로 만들고 대기 큐에 삽입된다"
"
Blocked/Wait(블록 상태)는 프로세스가 자원을 요청하거나, 입출력을 요청하고, 완료를 기다리는 상태이다"
"
입출력이 완료되면 프로세스는 Ready 상태로 바뀌고 준비 큐에 삽입된다"
"
Terminated/Zombie(좀비 상태)는 프로세스가 불완전 종료된 상태로, 프로세스가 차지하고 있던 메모리와 할당받았던 자원들을 모두 커널에 의해 반환된다"
"
프로세스 테이블의 항목과 PCB가 여전히 시스템에서 제거되지 않은 상태로, 프로세스가 남긴 종료 코드를 부모 프로세스가 읽어가지 않아 완전히 종료되지 않은 상태이다"
"
Terminated/Out 상태는 프로세스가 종료하면서 남긴 종료 코드를 부모 프로세스가 읽어 가서 완전히 종료된 상태로, 프로세스 테이블의 항목과 PCB가 시스템에서 완전히 제거된 상태이다"
"
과거 운영체제에서는 프로세스가 실행 단위였으므로, 프로세스 스케줄링은 Ready 상태의 프로세스 중에서 실행할 프로세스를 선택하는 것이었다"
" 
그러나 오늘날의 운영체제에서는 스레드가 실행 단위가 되어, 프로세스 스케줄링이 사라지고, 대신 Ready 상태의 스레드 중에서 실행할 스레드를 선택하는 스레드 스케줄링이 주로 사용된다"
"
이에 따라 프로세스는 스레드들에게 공유 자원을 제공하는 컨테이너 역할을 수행하는 구조로 바뀌었다"
"
프로세스는 일반적으로 부모-자식 관계를 가진다"
"
Windows에서는 모든 프로세스가 동등하여 계층 관계가 없지만, 다른 시스템에서는 프로세스가 부모-자식 구조로 계층을 이룬다"
"
시스템 부팅 시 최초로 실행되는 #0 프로세스는 조상 프로세스로, 모든 다른 프로세스는 이 조상 프로세스에서 유래한다"
"
부모 프로세스는 여러 개의 자식 프로세스를 가질 수 있으며, 모든 프로세스는 #0 프로세스를 제외하고 부모 프로세스를 가진다"
"
자식 프로세스는 부모 프로세스에 의해 생성되며, 프로세스 생성은 시스템 호출을 통해 이루어지며, fork(), clone() 등은 자식 프로세스를 만드는 데 사용된다"
"
리눅스에서 프로세스 생성 사례는 #0 프로세스, #1 프로세스, #2 프로세스가 있다"
"
swapper/idle 프로세스(#0 프로세스)는 시스템 부팅 시 최초로 실행되는 프로세스로, 수작업으로 생성된다"
"
init 프로세스(#1 프로세스)는 시스템 부팅 후 생성되는 모든 사용자 프로세스의 조상으로, 수작업으로 생성된다"
"
kthreadd 프로세스(#2 프로세스)는 커널 모드에서만 실행되는 모든 커널 프로세스의 조상으로, 수작업으로 생성된다"
"
fork()는 자식 프로세스를 생성하는 시스템 호출이다"
"
exit()는 현재 프로세스의 종료를 커널에 알리는 시스템 호출로, 이를 통해 커널이 해당 프로세스의 종료를 처리하는 코드를 실행한다"
"
Wait()는 부모가 자식 프로세스의 종료를 기다리고 확인하는 시스템 호출이다"
"
자식 프로세스가 부모 프로세스보다 먼저 종료한 경우 좀비 상태가 지속된 후 자식 프로세스의 종료가 확인되면 완전 종료가 된다"
"
프로세스가 종료하면 프로세스 제어 블록(PCB)에 종료 코드(exit status)가 저장되고, 프로세스 상태는 'Terminated'로 표시된다"
"
프로세스에게 할당된 모든 메모리는 반환되지만, PCB와 프로세스 테이블의 항목은 제거되지 않는다"
"
부모 프로세스는 wait() 시스템 호출을 통해 자식 프로세스의 종료 코드를 읽어야 한다"
"
자식 프로세스가 종료되면 부모 프로세스에게 SIGCHLD 신호가 전송되고, 부모 프로세스가 이 신호를 받았을 때 wait()을 호출하지 않으면, 자식 프로세스는 계속 좀비 상태로 남아 있게 된다"
"
좀비 프로세스를 제거하는 방법은 부모 프로세스에게 SIGCHLD 신호 보내어 wait()을 호출하거나 부모 프로세스를 강제 종료하여 좀비 프로세스가 init 프로세스의 자식이 되고 init 프로세스가 wait()을 호출하여 좀비 프로세스를 제거하는 방법이 있다"
"
고아 프로세스(Orphan Process)는 부모가 먼저 종료한 자식 프로세스이다"
"
부모 프로세스가 종료할 때, 커널은 exit() 시스템 호출을 통해 부모 프로세스에 자식 프로세스가 있는지 확인한다"
" 
자식 프로세스가 있으면, 커널은 자식을 init 프로세스에게 입양시킨다"
"
그러나 일부 운영체제나 특정 쉘에서는 부모 프로세스가 종료될 때 모든 자식 프로세스를 강제 종료시킬 수도 있다"
"
백그라운드(background) 프로세스는 터미널에서 실행되었지만, 터미널 사용자와의 대화가 없는 채 실행되거나, 사용자와 대화없이, 입력없이 실행되는 프로세스이다"
"
포그라운드(foreground) 프로세스는 실행되는 동안 터미널 사용자의 입력을 독점하는 프로세스이다"
"
CPU 집중 프로세스(CPU intensive/bound process)는 CPU 작업을 하는데 대부분의 시간을 보내는 프로세스로, 배열 곱, 인공지능 연산, 이미지 처리 등의 작업을 하며, CPU 속도가 성능을 좌우한다"
" 
I/O 집중 프로세스(I/O intensive/bound process)는 입출력 작업을 하느라 대부분의 시간을 보내는 프로세스로, 네트워크 전송, 파일 입출력에 집중된 프로세스이며, 입출력 장치나 입출력 시스템의 속도가 성능을 좌우한다"
"
운영체제 스케줄링에서는 I/O 집중 프로세스가 CPU 집중 프로세스보다 우선순위를 가진다"
"
I/O 작업 중 다른 프로세스가 CPU를 사용할 수 있게 하여 사용자 응답 시간을 줄이고, 시스템의 처리율을 높인다"
"
"
